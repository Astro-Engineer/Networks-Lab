package main

import (
    "fmt"
    "net"
    "os"
    "strings"
    "strconv"
)

const udpPort = 12345

func main() {
    localIP := getLocalIP()
    assignedPort := getAssignedPort()
    message := "Hello, network!"
    //UDP for recieving
    listener, err := net.ListenUDP("udp", &net.UDPAddr{IP: net.ParseIP(localIP), Port: assignedPort})
    if err != nil {
        fmt.Println("Error creating UDP listener:", err)
        os.Exit(1)
    }
    defer listener.Close()

    fmt.Printf("UDP listener is listening on %s:%d\n", localIP, assignedPort)

    receivedMessages := make(chan string)

    //listening goroutine
    go func() {
        buffer := make([]byte, 1024)
        for {
            n, addr, err := listener.ReadFromUDP(buffer)
            if err != nil {
                fmt.Println("Error reading UDP message:", err)
                continue
            }
            receivedMessage := string(buffer[:n])
            receivedMessages <- fmt.Sprintf("Received from %s:%d: %s", addr.IP, addr.Port, receivedMessage)
        }
    }()

    //target info (currently dummy for testing)
    targetIPs := []string{
        //"192.168.1.100:12345",
        
    }

    //UDP for sending
    sender, err := net.DialUDP("udp", nil, &net.UDPAddr{IP: net.ParseIP(localIP), Port: udpPort})
    if err != nil {
        fmt.Println("Error creating UDP sender:", err)
        os.Exit(1)
    }
    defer sender.Close()

    fmt.Printf("UDP sender is using local IP %s:%d\n", localIP, udpPort)
    //send to all targets
    for _, target := range targetIPs {
        targetAddr, err := net.ResolveUDPAddr("udp", target)
        if err != nil {
            fmt.Println("Error resolving target UDP address:", err)
            continue
        }
        _, err = sender.WriteTo([]byte(message), targetAddr)
        if err != nil {
            fmt.Printf("Error sending UDP message to %s:%d: %v\n", targetAddr.IP, targetAddr.Port, err)
        } else {
            fmt.Printf("Sent UDP message to %s:%d\n", targetAddr.IP, targetAddr.Port)
        }
    }

    //print out recieved
    for {
        receivedMessage := <-receivedMessages
        fmt.Println(receivedMessage)
    }
}

func getLocalIP() string {
    conn, err := net.Dial("udp", "8.8.8.8:80")
    if err != nil {
        fmt.Println("Error determining local IP address:", err)
        os.Exit(1)
    }
    defer conn.Close()

    localAddr := conn.LocalAddr().(*net.UDPAddr)
    return strings.Split(localAddr.String(), ":")[0]
}

func getAssignedPort() int {
    portStr := os.Getenv("CORED_PORT")
    if portStr == "" {
        return udpPort
    }

    assignedPort, err := strconv.Atoi(portStr)
    if err != nil {
        fmt.Println("Error parsing assigned port:", err)
        os.Exit(1)
    }

    return assignedPort
}
